(undo-tree-save-format-version . 1)
"f31288f9de46f4ad3877fc3c85734e6220e8465f"
[nil nil nil nil (26800 10666 937543 84000) 0 nil]
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . 1413) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (t 26800 10461 877716 58000)) nil (26800 10666 937540 563000) 0 nil])
([nil nil ((597 . 598) (596 . 597) (t 26800 10666 938037 222000) 564) nil (26800 12616 515033 70000) 0 nil])
([nil nil ((nil rear-nonsticky nil 791 . 792) (nil fontified nil 598 . 792) (598 . 792)) nil (26800 12616 515029 689000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3923 . 3924) (nil fontified nil 2209 . 3924) (2209 . 3924) (t 26800 12616 515119 925000)) nil (26806 39801 974981 875000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2209) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) 2213 (2208 . 2213) 2207) nil (26806 39801 974979 116000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2376 . 2377) (nil fontified nil 2209 . 2377) (2209 . 2377) (t 26806 39801 980289 714000)) nil (26806 40053 62101 530000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2209) (undo-tree-id7 . -4) 2213 (2208 . 2213) 2144) nil (26806 40053 62100 854000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2607 . 2608) (nil fontified nil 2378 . 2608) (2378 . 2608)) nil (26806 40053 62099 858000) 0 nil])
([nil nil ((2377 . 2378) 2371) nil (26806 40053 62099 275000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -2610) (undo-tree-id5 . -4) (undo-tree-id6 . -4) 2614 (2609 . 2614) 2590) nil (26806 40053 62098 384000) 0 nil])
([nil nil ((2414 . 2419)) nil (26806 40053 62091 331000) 0 nil])
([nil nil ((2232 . 2237)) nil (26806 40301 764025 866000) 0 nil])
([nil nil ((2481 . 2494) (#("i" 0 1 (fontified nil)) . -2481) (undo-tree-id180 . -1) (2479 . 2482) (2474 . 2479) (t 26806 40053 63255 170000) 2425) nil (26806 40351 899810 152000) 0 nil] [nil nil ((nil rear-nonsticky nil 3673 . 3674) (nil fontified nil 3515 . 3516) (nil fontified nil 3568 . 3576) (3515 . 3674) (#("        photo_base64 = extract_base64_image(photo_data_url)
        if not photo_base64:
            return jsonify({\"error\": \"Некорректный формат изображения\"}), 400" 0 8 (fontified t) 8 20 (face font-lock-variable-name-face fontified t) 20 21 (fontified t) 21 22 (face font-lock-operator-face fontified t) 22 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t) 44 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 68 (fontified t) 68 70 (face font-lock-keyword-face fontified t) 70 71 (fontified t) 71 74 (face font-lock-keyword-face fontified t) 74 101 (fontified t) 101 107 (face font-lock-keyword-face fontified t) 107 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-1-face) fontified t) 116 117 (face (rainbow-delimiters-depth-2-face) fontified t) 117 124 (face font-lock-string-face fontified t) 124 126 (fontified t) 126 159 (face font-lock-string-face fontified t) 159 160 (face (rainbow-delimiters-depth-2-face) fontified t) 160 161 (face (rainbow-delimiters-depth-1-face) fontified t) 161 166 (fontified t)) . 3515) (undo-tree-id116 . -165) (undo-tree-id117 . -89) (undo-tree-id118 . -89) (undo-tree-id119 . -89) (undo-tree-id120 . -89) (undo-tree-id121 . -89) (undo-tree-id122 . -89) (undo-tree-id123 . -60) (undo-tree-id124 . -60) (undo-tree-id125 . -60) (undo-tree-id126 . -60) (undo-tree-id127 . -60) (undo-tree-id128 . -60) (undo-tree-id129 . -60) (undo-tree-id130 . -60) (undo-tree-id131 . -60) (undo-tree-id132 . -60) (undo-tree-id133 . -60) (undo-tree-id134 . -60) (undo-tree-id135 . -60) (undo-tree-id136 . -60) (undo-tree-id137 . -60) (undo-tree-id138 . -60) (undo-tree-id139 . -60) (undo-tree-id140 . -60) (undo-tree-id141 . -60) (undo-tree-id142 . -60) (undo-tree-id143 . -60) (undo-tree-id144 . -60) (undo-tree-id145 . -89) (undo-tree-id146 . -89) (undo-tree-id147 . -89) (undo-tree-id148 . -89) (undo-tree-id149 . -89) (undo-tree-id150 . -89) (undo-tree-id151 . -89) (undo-tree-id152 . -89) (undo-tree-id153 . -89) (undo-tree-id154 . -89) (undo-tree-id155 . -89) (undo-tree-id156 . -89) (undo-tree-id157 . -89) (undo-tree-id158 . -89) (undo-tree-id159 . -89) (undo-tree-id160 . -101) (undo-tree-id161 . -101) (undo-tree-id162 . -101) (undo-tree-id163 . -101) (undo-tree-id164 . -101) (undo-tree-id165 . -101) (undo-tree-id166 . -101) (undo-tree-id167 . -101) (t 26806 40053 63255 170000)) ((3515 . 3681) (#(" photo_base64 = extract_base64_image(photo_data_url)
        if not photo_base64:
            return jsonify({\"error\": \"Некорректный формат изображения\"}), 400" 0 1 (fontified nil) 1 13 (face font-lock-variable-name-face fontified nil) 13 14 (fontified nil) 14 15 (face font-lock-operator-face fontified nil) 15 36 (fontified nil) 36 37 (face (rainbow-delimiters-depth-1-face) fontified nil) 37 51 (fontified nil) 51 52 (face (rainbow-delimiters-depth-1-face) fontified nil) 52 53 (fontified nil) 53 61 (fontified nil) 61 63 (face font-lock-keyword-face fontified nil) 63 64 (fontified nil) 64 67 (face font-lock-keyword-face fontified nil) 67 82 (fontified nil) 82 94 (fontified nil) 94 100 (face font-lock-keyword-face fontified nil) 100 108 (fontified nil) 108 109 (face (rainbow-delimiters-depth-1-face) fontified nil) 109 110 (face (rainbow-delimiters-depth-2-face) fontified nil) 110 117 (face font-lock-string-face fontified nil) 117 119 (fontified nil) 119 152 (face font-lock-string-face fontified nil) 152 153 (face (rainbow-delimiters-depth-2-face) fontified nil) 153 154 (face (rainbow-delimiters-depth-1-face) fontified nil) 154 158 (fontified nil) 158 159 (rear-nonsticky nil fontified nil)) . 3515) (undo-tree-id168 . -158) (undo-tree-id169 . -158) (undo-tree-id170 . -51) (undo-tree-id171 . -94) (undo-tree-id172 . -94) (undo-tree-id173 . -94) (undo-tree-id174 . -94) (undo-tree-id175 . -51) (undo-tree-id176 . -94) (undo-tree-id177 . -94) (undo-tree-id178 . -94) (undo-tree-id179 . -94) (nil fontified t 3568 . 3576) (nil fontified t 3515 . 3516) (nil rear-nonsticky t 3673 . 3674)) (26806 40301 439865 630000) 0 nil])
([nil nil ((2496 . 2499) (#("0" 0 1 (fontified t)) . -2496) (undo-tree-id181 . -1) 2497 (2493 . 2497) (t 26806 40351 901186 709000)) nil (26806 40369 287522 865000) 0 nil])
nil
([nil nil ((2552 . 2555) (#("i" 0 1 (fontified nil)) . -2552) (undo-tree-id182 . -1) (2550 . 2553) (2537 . 2550) (t 26806 40369 287584 850000) 2527) nil (26806 40410 716785 304000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2576 . 2577) (nil fontified nil 2555 . 2577) (2555 . 2577) 2554) nil (26806 40410 716779 597000) 0 nil])
([nil nil ((2555 . 2557)) nil (26806 40410 716779 51000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2556)) nil (26806 40410 716778 773000) 0 nil])
([nil nil ((2578 . 2579)) nil (26806 40410 716778 289000) 0 nil])
([nil nil ((2576 . 2577) (#("1" 0 1 (fontified t)) . 2576)) nil (26806 40410 716775 322000) 0 nil])
([nil nil ((2576 . 2577) (#("0" 0 1 (fontified t)) . 2576) (undo-tree-id183 . -1) (t 26806 40410 717531 429000)) nil (26806 40423 694713 741000) 0 nil])
([nil nil ((2578 . 2584)) nil (26806 40423 694705 510000) 0 nil])
([nil nil ((#("            print(data_url.split(',')[1][:100])
" 0 12 (fontified t) 12 17 (face font-lock-builtin-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 36 (face font-lock-string-face fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) rear-nonsticky t fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (face (rainbow-delimiters-depth-1-face) fontified t) 47 48 (fontified t)) . 2538) (undo-tree-id216 . -17) (undo-tree-id217 . -17) (undo-tree-id218 . -47) (undo-tree-id219 . 2) (undo-tree-id220 . -45) (undo-tree-id221 . -45) 2583 (t 26806 40423 695827 340000)) nil (26806 40435 833863 740000) 0 nil])
([nil nil ((#("    print(data_url[:100])
" 0 4 (fontified t) 4 9 (face font-lock-builtin-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (fontified t)) . 2475) (undo-tree-id184 . -25) (undo-tree-id185 . -24) (undo-tree-id186 . -24) (undo-tree-id187 . -24) (undo-tree-id188 . -24) (undo-tree-id189 . -24) (undo-tree-id190 . -24) (undo-tree-id191 . -24) (undo-tree-id192 . -24) (undo-tree-id193 . -24) (undo-tree-id194 . -24) (undo-tree-id195 . -24) (undo-tree-id196 . -24) (undo-tree-id197 . -24) (undo-tree-id198 . -24) (undo-tree-id199 . -24) (undo-tree-id200 . -24) (undo-tree-id201 . -24) (undo-tree-id202 . -24) (undo-tree-id203 . -24) (undo-tree-id204 . -24) (undo-tree-id205 . -24) (undo-tree-id206 . -24) (undo-tree-id207 . -24) (undo-tree-id208 . -24) (undo-tree-id209 . -24) (undo-tree-id210 . -24) (undo-tree-id211 . -24) (undo-tree-id212 . -24) (undo-tree-id213 . -24) (undo-tree-id214 . -24) (undo-tree-id215 . -26) 2499) nil (26806 40560 179907 916000) 0 nil])
([nil nil ((apply -8 3479 3699 undo--wrap-and-run-primitive-undo 3479 3699 ((3618 . 3620) (3587 . 3589) (3525 . 3527) (3487 . 3489) 3682))) nil (26806 40572 984055 856000) 0 nil] [nil nil ((nil rear-nonsticky nil 4589 . 4590) (nil fontified nil 3691 . 4590) (3691 . 4590) (#("        # Validate base64 image data
        try:
            base64.b64decode(photo_base64)
        except Exception:
            return jsonify({\"error\": \"Некорректные данные изображения\"}), 400" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 37 (face font-lock-comment-face fontified t) 37 45 (fontified t) 45 47 (face font-lock-keyword-face fontified t) 47 48 (face font-lock-keyword-face fontified t) 48 50 (fontified t) 50 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-1-face) fontified t) 79 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-1-face) fontified t) 92 101 (fontified t) 101 107 (face font-lock-keyword-face fontified t) 107 108 (fontified t) 108 117 (face font-lock-type-face fontified t) 117 131 (fontified t) 131 137 (face font-lock-keyword-face fontified t) 137 145 (fontified t) 145 146 (face (rainbow-delimiters-depth-1-face) fontified t) 146 147 (face (rainbow-delimiters-depth-2-face) fontified t) 147 154 (face font-lock-string-face fontified t) 154 156 (fontified t) 156 189 (face font-lock-string-face fontified t) 189 190 (face (rainbow-delimiters-depth-2-face) fontified t) 190 191 (face (rainbow-delimiters-depth-1-face) fontified t) 191 196 (fontified t)) . 3691) (undo-tree-id222 . -195) (undo-tree-id223 . -7) (undo-tree-id224 . -126) (undo-tree-id225 . -126) 3888 (t 26806 40435 835103 860000)) ((3691 . 3887) (#("    # Validate base64 image data
        try:
            # Add padding if necessary and decode
            missing_padding = len(photo_base64) % 4
            if missing_padding:
                photo_base64 += '=' * (4 - missing_padding)
            base64.b64decode(photo_base64, validate=True)
        except Exception as e:
            print(f\"Base64 decode error: {str(e)}\")
            print(f\"Base64 string length: {len(photo_base64)}\")
            print(f\"Base64 string start: {photo_base64[:50]}...\")
            return jsonify({\"error\": \"Некорректные данные изображения\"}), 400
        
        # Just print that we received the image
        print(f\"Received image for IIN: {iin}, User ID: {user_id}\")
        print(f\"Image size: {len(photo_base64)} characters\")
        
        return jsonify({
            \"message\": \"Изображение получено\",
            \"success\": True
        }), 200" 0 4 (fontified nil) 4 6 (face font-lock-comment-delimiter-face fontified nil) 6 33 (face font-lock-comment-face fontified nil) 33 41 (fontified nil) 41 44 (face font-lock-keyword-face fontified nil) 44 58 (fontified nil) 58 60 (face font-lock-comment-delimiter-face fontified nil) 60 96 (face font-lock-comment-face fontified nil) 96 108 (fontified nil) 108 123 (face font-lock-variable-name-face fontified nil) 123 124 (fontified nil) 124 125 (face font-lock-operator-face fontified nil) 125 126 (fontified nil) 126 129 (face font-lock-builtin-face fontified nil) 129 130 (face (rainbow-delimiters-depth-1-face) fontified nil) 130 142 (fontified nil) 142 143 (face (rainbow-delimiters-depth-1-face) fontified nil) 143 144 (fontified nil) 144 145 (face font-lock-operator-face fontified nil) 145 160 (fontified nil) 160 162 (face font-lock-keyword-face fontified nil) 162 196 (fontified nil) 196 208 (face font-lock-variable-name-face fontified nil) 208 209 (fontified nil) 209 211 (face font-lock-operator-face fontified nil) 211 212 (fontified nil) 212 215 (face font-lock-string-face fontified nil) 215 216 (fontified nil) 216 217 (face font-lock-operator-face fontified nil) 217 218 (fontified nil) 218 219 (face (rainbow-delimiters-depth-1-face) fontified nil) 219 221 (fontified nil) 221 222 (face font-lock-operator-face fontified nil) 222 238 (fontified nil) 238 239 (face (rainbow-delimiters-depth-1-face) fontified nil) 239 268 (fontified nil) 268 269 (face (rainbow-delimiters-depth-1-face) fontified nil) 269 291 (fontified nil) 291 292 (face font-lock-operator-face fontified nil) 292 296 (face font-lock-constant-face fontified nil) 296 297 (face (rainbow-delimiters-depth-1-face) fontified nil) 297 306 (fontified nil) 306 312 (face font-lock-keyword-face fontified nil) 312 313 (fontified nil) 313 322 (face font-lock-type-face fontified nil) 322 323 (fontified nil) 323 325 (face font-lock-keyword-face fontified nil) 325 341 (fontified nil) 341 346 (face font-lock-builtin-face fontified nil) 346 347 (face (rainbow-delimiters-depth-1-face) fontified nil) 347 348 (fontified nil) 348 370 (face font-lock-string-face fontified nil) 370 371 (face nil fontified nil) 371 374 (face font-lock-builtin-face fontified nil) 374 378 (face nil fontified nil) 378 379 (face font-lock-string-face fontified nil) 379 380 (face (rainbow-delimiters-depth-1-face) fontified nil) 380 393 (fontified nil) 393 398 (face font-lock-builtin-face fontified nil) 398 399 (face (rainbow-delimiters-depth-1-face) fontified nil) 399 400 (fontified nil) 400 423 (face font-lock-string-face fontified nil) 423 424 (face nil fontified nil) 424 427 (face font-lock-builtin-face fontified nil) 427 442 (face nil fontified nil) 442 443 (face font-lock-string-face fontified nil) 443 444 (face (rainbow-delimiters-depth-1-face) fontified nil) 444 457 (fontified nil) 457 462 (face font-lock-builtin-face fontified nil) 462 463 (face (rainbow-delimiters-depth-1-face) fontified nil) 463 464 (fontified nil) 464 486 (face font-lock-string-face fontified nil) 486 505 (face nil fontified nil) 505 509 (face font-lock-string-face fontified nil) 509 510 (face (rainbow-delimiters-depth-1-face) fontified nil) 510 523 (fontified nil) 523 529 (face font-lock-keyword-face fontified nil) 529 537 (fontified nil) 537 538 (face (rainbow-delimiters-depth-1-face) fontified nil) 538 539 (face (rainbow-delimiters-depth-2-face) fontified nil) 539 546 (face font-lock-string-face fontified nil) 546 548 (fontified nil) 548 581 (face font-lock-string-face fontified nil) 581 582 (face (rainbow-delimiters-depth-2-face) fontified nil) 582 583 (face (rainbow-delimiters-depth-1-face) fontified nil) 583 606 (fontified nil) 606 608 (face font-lock-comment-delimiter-face fontified nil) 608 646 (face font-lock-comment-face fontified nil) 646 654 (fontified nil) 654 659 (face font-lock-builtin-face fontified nil) 659 660 (face (rainbow-delimiters-depth-1-face) fontified nil) 660 661 (fontified nil) 661 686 (face font-lock-string-face fontified nil) 686 691 (face nil fontified nil) 691 702 (face font-lock-string-face fontified nil) 702 711 (face nil fontified nil) 711 712 (face font-lock-string-face fontified nil) 712 713 (face (rainbow-delimiters-depth-1-face) fontified nil) 713 722 (fontified nil) 722 727 (face font-lock-builtin-face fontified nil) 727 728 (face (rainbow-delimiters-depth-1-face) fontified nil) 728 729 (fontified nil) 729 742 (face font-lock-string-face fontified nil) 742 743 (face nil fontified nil) 743 746 (face font-lock-builtin-face fontified nil) 746 761 (face nil fontified nil) 761 773 (face font-lock-string-face fontified nil) 773 774 (face (rainbow-delimiters-depth-1-face) fontified nil) 774 792 (fontified nil) 792 798 (face font-lock-keyword-face fontified nil) 798 806 (fontified nil) 806 807 (face (rainbow-delimiters-depth-1-face) fontified nil) 807 808 (face (rainbow-delimiters-depth-2-face) fontified nil) 808 821 (fontified nil) 821 830 (face font-lock-string-face fontified nil) 830 832 (fontified nil) 832 854 (face font-lock-string-face fontified nil) 854 868 (fontified nil) 868 877 (face font-lock-string-face fontified nil) 877 879 (fontified nil) 879 883 (face font-lock-constant-face fontified nil) 883 884 (fontified nil) 884 892 (fontified nil) 892 893 (face (rainbow-delimiters-depth-2-face) fontified nil) 893 894 (face (rainbow-delimiters-depth-1-face) fontified nil) 894 898 (fontified nil) 898 899 (rear-nonsticky nil fontified nil)) . 3691) (undo-tree-id226 . -898) (undo-tree-id227 . -898) (undo-tree-id228 . -660) (nil fontified t 4574 . 4575) (nil fontified t 4570 . 4574) (nil fontified t 4568 . 4570) (nil fontified t 4559 . 4568) (nil fontified t 4545 . 4559) (nil fontified t 4523 . 4545) (nil fontified t 4521 . 4523) (nil fontified t 4512 . 4521) (nil fontified t 4499 . 4512) (nil fontified t 4498 . 4499) (nil fontified t 4497 . 4498) (nil fontified t 4489 . 4497) (nil fontified t 4483 . 4489) (nil fontified t 4465 . 4483) (nil fontified t 4464 . 4465) (nil fontified t 4452 . 4464) (nil fontified t 4437 . 4452) (nil fontified t 4434 . 4437) (nil fontified t 4433 . 4434) (nil fontified t 4420 . 4433) (nil fontified t 4419 . 4420) (nil fontified t 4418 . 4419) (nil fontified t 4413 . 4418) (nil fontified t 4404 . 4413) (nil fontified t 4403 . 4404) (nil fontified t 4402 . 4403) (nil fontified t 4393 . 4402) (nil fontified t 4382 . 4393) (nil fontified t 4377 . 4382) (nil fontified t 4352 . 4377) (nil fontified t 4351 . 4352) (nil fontified t 4350 . 4351) (nil fontified t 4345 . 4350) (nil fontified t 4337 . 4345) (nil fontified t 4299 . 4337) (nil fontified t 4297 . 4299) (nil fontified t 4274 . 4297) (nil fontified t 4273 . 4274) (nil fontified t 4272 . 4273) (nil fontified t 4239 . 4272) (nil fontified t 4237 . 4239) (nil fontified t 4230 . 4237) (nil fontified t 4229 . 4230) (nil fontified t 4228 . 4229) (nil fontified t 4220 . 4228) (nil fontified t 4214 . 4220) (nil fontified t 4201 . 4214) (nil fontified t 4200 . 4201) (nil fontified t 4196 . 4200) (nil fontified t 4177 . 4196) (nil fontified t 4155 . 4177) (nil fontified t 4154 . 4155) (nil fontified t 4153 . 4154) (nil fontified t 4148 . 4153) (nil fontified t 4135 . 4148) (nil fontified t 4134 . 4135) (nil fontified t 4133 . 4134) (nil fontified t 4118 . 4133) (nil fontified t 4115 . 4118) (nil fontified t 4114 . 4115) (nil fontified t 4091 . 4114) (nil fontified t 4090 . 4091) (nil fontified t 4089 . 4090) (nil fontified t 4084 . 4089) (nil fontified t 4071 . 4084) (nil fontified t 4070 . 4071) (nil fontified t 4069 . 4070) (nil fontified t 4065 . 4069) (nil fontified t 4062 . 4065) (nil fontified t 4061 . 4062) (nil fontified t 4039 . 4061) (nil fontified t 4038 . 4039) (nil fontified t 4037 . 4038) (nil fontified t 4032 . 4037) (nil fontified t 4016 . 4032) (nil fontified t 4014 . 4016) (nil fontified t 4013 . 4014) (nil fontified t 4004 . 4013) (nil fontified t 4003 . 4004) (nil fontified t 3997 . 4003) (nil fontified t 3988 . 3997) (nil fontified t 3987 . 3988) (nil fontified t 3983 . 3987) (nil fontified t 3982 . 3983) (nil fontified t 3960 . 3982) (nil fontified t 3959 . 3960) (nil fontified t 3930 . 3959) (nil fontified t 3929 . 3930) (nil fontified t 3913 . 3929) (nil fontified t 3912 . 3913) (nil fontified t 3910 . 3912) (nil fontified t 3909 . 3910) (nil fontified t 3908 . 3909) (nil fontified t 3907 . 3908) (nil fontified t 3906 . 3907) (nil fontified t 3903 . 3906) (nil fontified t 3902 . 3903) (nil fontified t 3900 . 3902) (nil fontified t 3899 . 3900) (nil fontified t 3887 . 3899) (nil fontified t 3853 . 3887) (nil fontified t 3851 . 3853) (nil fontified t 3836 . 3851) (nil fontified t 3835 . 3836) (nil fontified t 3834 . 3835) (nil fontified t 3833 . 3834) (nil fontified t 3821 . 3833) (nil fontified t 3820 . 3821) (nil fontified t 3817 . 3820) (nil fontified t 3816 . 3817) (nil fontified t 3815 . 3816) (nil fontified t 3814 . 3815) (nil fontified t 3799 . 3814) (nil fontified t 3787 . 3799) (nil fontified t 3751 . 3787) (nil fontified t 3749 . 3751) (nil fontified t 3735 . 3749) (nil fontified t 3732 . 3735) (nil fontified t 3724 . 3732) (nil fontified t 3697 . 3724) (nil fontified t 3695 . 3697) (nil fontified t 3691 . 3695) (nil rear-nonsticky t 4589 . 4590) (t 26806 40460 710669 702000)) (26806 40460 710270 80000) 0 nil])
([nil nil ((3784 . 3792) (#("base64" 0 6 (fontified t)) . 3784) (undo-tree-id229 . -5) (undo-tree-id230 . -6) (undo-tree-id231 . -6)) nil (26806 40572 984053 509000) 0 nil])
nil
([nil nil ((3763 . 3767) (#("i" 0 1 (fontified nil)) . -3763) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (3762 . 3764) (#("i" 0 1 (fontified t)) . -3762) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("r" 0 1 (fontified t)) . -3763) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("n" 0 1 (fontified t)) . -3764) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("t" 0 1 (fontified t)) . -3765) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 3766 (3762 . 3766) (#("i" 0 1 (fontified nil)) . -3762) (undo-tree-id372 . -1) (3761 . 3763) (t 26806 40572 985210 782000)) nil (26806 40660 240386 984000) 0 nil])
([nil nil ((3799 . 3800)) nil (26806 40660 240344 163000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified nil)) . -3811) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (3799 . 3812) (t 26806 40660 242171 655000)) nil (26806 40697 503852 217000) 0 nil])
([nil nil ((3812 . 3815) (#("i" 0 1 (face font-lock-string-face fontified nil)) . -3812) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (3811 . 3813) (#("i" 0 1 (face font-lock-string-face fontified nil)) . -3811) (undo-tree-id379 . -1) (3811 . 3812) 3810) nil (26806 40847 372505 760000) 0 nil])
([nil nil ((#("        if not photo_data_url:
            return jsonify({\"error\": \"Фотография не предоставлена\"}), 400
        
        # # Extract base64 image data
        # photo_base64 = extract_base64_image(photo_data_url)
        # if not photo_base64:
        #     return jsonify({\"error\": \"Некорректный формат изображения\"}), 400
        
        # Validate base64 image data
        try:
            print(base64.b64decode(photo_data_url).decode(\"ascii\"))
        except Exception:
            return jsonify({\"error\": \"Некорректные данные изображения\"}), 400
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 43 (fontified t) 43 49 (face font-lock-keyword-face fontified t) 49 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 66 (face font-lock-string-face fontified t) 66 68 (fontified t) 68 97 (face font-lock-string-face fontified t) 97 98 (face (rainbow-delimiters-depth-2-face) fontified t) 98 99 (face (rainbow-delimiters-depth-1-face) fontified t) 99 114 (fontified t) 114 122 (fontified t) 122 124 (face font-lock-comment-delimiter-face fontified t) 124 126 (face font-lock-comment-face fontified t) 126 152 (face font-lock-comment-face fontified t) 152 160 (fontified t) 160 162 (face font-lock-comment-delimiter-face fontified t) 162 174 (face font-lock-comment-face fontified t) 174 175 (face font-lock-comment-face fontified t) 175 176 (face font-lock-comment-face fontified t) 176 197 (face font-lock-comment-face fontified t) 197 198 (face font-lock-comment-face fontified t) 198 212 (face font-lock-comment-face fontified t) 212 213 (face font-lock-comment-face fontified t) 213 214 (face font-lock-comment-face fontified t) 214 222 (fontified t) 222 224 (face font-lock-comment-delimiter-face fontified t) 224 226 (face font-lock-comment-face fontified t) 226 227 (face font-lock-comment-face fontified t) 227 230 (face font-lock-comment-face fontified t) 230 245 (face font-lock-comment-face fontified t) 245 253 (fontified t) 253 255 (face font-lock-comment-delimiter-face fontified t) 255 259 (face font-lock-comment-delimiter-face fontified t) 259 265 (face font-lock-comment-face fontified t) 265 273 (face font-lock-comment-face fontified t) 273 274 (face font-lock-comment-face fontified t) 274 275 (face font-lock-comment-face fontified t) 275 282 (face font-lock-comment-face fontified t) 282 284 (face font-lock-comment-face fontified t) 284 317 (face font-lock-comment-face fontified t) 317 318 (face font-lock-comment-face fontified t) 318 319 (face font-lock-comment-face fontified t) 319 324 (face font-lock-comment-face fontified t) 324 325 (face font-lock-comment-face fontified t) 325 334 (fontified t) 334 342 (fontified t) 342 344 (face font-lock-comment-delimiter-face fontified t) 344 371 (face font-lock-comment-face fontified t) 371 379 (fontified t) 379 381 (face font-lock-keyword-face fontified t) 381 382 (face font-lock-keyword-face fontified t) 382 384 (fontified t) 384 396 (fontified t) 396 401 (face font-lock-builtin-face fontified t) 401 402 (face (rainbow-delimiters-depth-1-face) fontified t) 402 418 (fontified t) 418 419 (face (rainbow-delimiters-depth-2-face) fontified t) 419 433 (fontified t) 433 434 (face (rainbow-delimiters-depth-2-face) fontified t) 434 441 (fontified t) 441 442 (face (rainbow-delimiters-depth-2-face) fontified t) 442 449 (face font-lock-string-face fontified t) 449 450 (face (rainbow-delimiters-depth-2-face) fontified t) 450 451 (face (rainbow-delimiters-depth-1-face) fontified t) 451 452 (fontified t) 452 460 (fontified t) 460 466 (face font-lock-keyword-face fontified t) 466 467 (fontified t) 467 476 (face font-lock-type-face fontified t) 476 490 (fontified t) 490 496 (face font-lock-keyword-face fontified t) 496 504 (fontified t) 504 505 (face (rainbow-delimiters-depth-1-face) fontified t) 505 506 (face (rainbow-delimiters-depth-2-face) fontified t) 506 513 (face font-lock-string-face fontified t) 513 515 (fontified t) 515 548 (face font-lock-string-face fontified t) 548 549 (face (rainbow-delimiters-depth-2-face) fontified t) 549 550 (face (rainbow-delimiters-depth-1-face) fontified t) 550 555 (fontified t) 555 556 (fontified t)) . 3365) (undo-tree-id407 . -445) (undo-tree-id408 . -478) (undo-tree-id409 . -555) (undo-tree-id410 . 106) (undo-tree-id411 . -478) (undo-tree-id412 . -325) (undo-tree-id413 . -152) (undo-tree-id414 . -152) (undo-tree-id415 . -152) (undo-tree-id416 . -152) (undo-tree-id417 . -152) (undo-tree-id418 . -556) (undo-tree-id419 . -334) (undo-tree-id420 . -168) (undo-tree-id421 . -325) (undo-tree-id422 . -556) (undo-tree-id423 . -449) (undo-tree-id424 . -478) 3843 (t 26806 40697 505005 452000)) nil (26806 40865 949966 265000) 0 nil] [nil nil ((nil rear-nonsticky nil 5282 . 5283) (nil fontified nil 3920 . 5283) (3920 . 5283) (#("        if not photo_data_url:
            return jsonify({\"error\": \"Фотография не предоставлена\"}), 400
        
        # # Extract base64 image data
        # photo_base64 = extract_base64_image(photo_data_url)
        # if not photo_base64:
        #     return jsonify({\"error\": \"Некорректный формат изображения\"}), 400
        
        # Validate base64 image data
        try:
            print(base64.b64decode(photo_data_url).decode(\"ascii\"))
        except Exception:
            return jsonify({\"error\": \"Некорректные данные изображения\"}), 400" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 43 (fontified t) 43 49 (face font-lock-keyword-face fontified t) 49 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 66 (face font-lock-string-face fontified t) 66 68 (fontified t) 68 97 (face font-lock-string-face fontified t) 97 98 (face (rainbow-delimiters-depth-2-face) fontified t) 98 99 (face (rainbow-delimiters-depth-1-face) fontified t) 99 114 (fontified t) 114 122 (fontified t) 122 124 (face font-lock-comment-delimiter-face fontified t) 124 126 (face font-lock-comment-face fontified t) 126 152 (face font-lock-comment-face fontified t) 152 160 (fontified t) 160 162 (face font-lock-comment-delimiter-face fontified t) 162 174 (face font-lock-comment-face fontified t) 174 175 (face font-lock-comment-face fontified t) 175 176 (face font-lock-comment-face fontified t) 176 197 (face font-lock-comment-face fontified t) 197 198 (face font-lock-comment-face fontified t) 198 212 (face font-lock-comment-face fontified t) 212 213 (face font-lock-comment-face fontified t) 213 214 (face font-lock-comment-face fontified t) 214 222 (fontified t) 222 224 (face font-lock-comment-delimiter-face fontified t) 224 226 (face font-lock-comment-face fontified t) 226 227 (face font-lock-comment-face fontified t) 227 230 (face font-lock-comment-face fontified t) 230 245 (face font-lock-comment-face fontified t) 245 253 (fontified t) 253 255 (face font-lock-comment-delimiter-face fontified t) 255 259 (face font-lock-comment-delimiter-face fontified t) 259 265 (face font-lock-comment-face fontified t) 265 273 (face font-lock-comment-face fontified t) 273 274 (face font-lock-comment-face fontified t) 274 275 (face font-lock-comment-face fontified t) 275 282 (face font-lock-comment-face fontified t) 282 284 (face font-lock-comment-face fontified t) 284 317 (face font-lock-comment-face fontified t) 317 318 (face font-lock-comment-face fontified t) 318 319 (face font-lock-comment-face fontified t) 319 324 (face font-lock-comment-face fontified t) 324 325 (face font-lock-comment-face fontified t) 325 334 (fontified t) 334 342 (fontified t) 342 344 (face font-lock-comment-delimiter-face fontified t) 344 371 (face font-lock-comment-face fontified t) 371 379 (fontified t) 379 381 (face font-lock-keyword-face fontified t) 381 382 (face font-lock-keyword-face fontified t) 382 384 (fontified t) 384 396 (fontified t) 396 401 (face font-lock-builtin-face fontified t) 401 402 (face (rainbow-delimiters-depth-1-face) fontified t) 402 418 (fontified t) 418 419 (face (rainbow-delimiters-depth-2-face) fontified t) 419 433 (fontified t) 433 434 (face (rainbow-delimiters-depth-2-face) fontified t) 434 441 (fontified t) 441 442 (face (rainbow-delimiters-depth-2-face) fontified t) 442 449 (face font-lock-string-face fontified t) 449 450 (face (rainbow-delimiters-depth-2-face) fontified t) 450 451 (face (rainbow-delimiters-depth-1-face) fontified t) 451 452 (fontified t) 452 460 (fontified t) 460 466 (face font-lock-keyword-face fontified t) 466 467 (fontified t) 467 476 (face font-lock-type-face fontified t) 476 490 (fontified t) 490 496 (face font-lock-keyword-face fontified t) 496 504 (fontified t) 504 505 (face (rainbow-delimiters-depth-1-face) fontified t) 505 506 (face (rainbow-delimiters-depth-2-face) fontified t) 506 513 (face font-lock-string-face fontified t) 513 515 (fontified t) 515 548 (face font-lock-string-face fontified t) 548 549 (face (rainbow-delimiters-depth-2-face) fontified t) 549 550 (face (rainbow-delimiters-depth-1-face) fontified t) 550 555 (fontified t)) . 3365) (undo-tree-id386 . -445) (undo-tree-id387 . -554) (undo-tree-id388 . 105) (undo-tree-id389 . -29) (undo-tree-id390 . -507) (undo-tree-id391 . -325) (undo-tree-id392 . -152) (undo-tree-id393 . -152) (undo-tree-id394 . -152) (undo-tree-id395 . -152) (undo-tree-id396 . -152) (undo-tree-id397 . -334) (undo-tree-id398 . -168) (undo-tree-id399 . -325) (undo-tree-id400 . -114) (undo-tree-id401 . -245) (undo-tree-id402 . -449) (undo-tree-id403 . -507) 3921 (t 26806 40697 505005 452000)) ((3365 . 3920) (#("if not photo_data_url:
            return jsonify({\"error\": \"Фотография не предоставлена\"}), 400
        
        # Validate data URL format
        if not photo_data_url.startswith('data:image/'):
            return jsonify({\"error\": \"Некорректный формат изображения\"}), 400
        
        # Extract base64 image data
        photo_base64 = extract_base64_image(photo_data_url)
        if not photo_base64:
            return jsonify({\"error\": \"Некорректный формат изображения\"}), 400
        
        # Validate base64 image data
        try:
            # Add padding if necessary and decode
            missing_padding = len(photo_base64) % 4
            if missing_padding:
                photo_base64 += '=' * (4 - missing_padding)
            decoded_image = base64.b64decode(photo_base64, validate=True)
            print(f\"Successfully decoded image: {len(decoded_image)} bytes\")
        except Exception as e:
            print(f\"Base64 decode error: {str(e)}\")
            return jsonify({\"error\": \"Некорректные данные изображения\"}), 400
        
        # Just print that we received the image
        print(f\"Received image for IIN: {iin}, User ID: {user_id}\")
        print(f\"Image size: {len(photo_base64)} characters\")
        
        return jsonify({
            \"message\": \"Изображение получено\",
            \"success\": True
        }), 200" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 6 (face font-lock-keyword-face fontified nil) 6 35 (fontified nil) 35 41 (face font-lock-keyword-face fontified nil) 41 49 (fontified nil) 49 50 (face (rainbow-delimiters-depth-1-face) fontified nil) 50 51 (face (rainbow-delimiters-depth-2-face) fontified nil) 51 58 (face font-lock-string-face fontified nil) 58 60 (fontified nil) 60 89 (face font-lock-string-face fontified nil) 89 90 (face (rainbow-delimiters-depth-2-face) fontified nil) 90 91 (face (rainbow-delimiters-depth-1-face) fontified nil) 91 114 (fontified nil) 114 116 (face font-lock-comment-delimiter-face fontified nil) 116 141 (face font-lock-comment-face fontified nil) 141 149 (fontified nil) 149 151 (face font-lock-keyword-face fontified nil) 151 152 (fontified nil) 152 155 (face font-lock-keyword-face fontified nil) 155 181 (fontified nil) 181 182 (face (rainbow-delimiters-depth-1-face) fontified nil) 182 195 (face font-lock-string-face fontified nil) 195 196 (face (rainbow-delimiters-depth-1-face) fontified nil) 196 210 (fontified nil) 210 216 (face font-lock-keyword-face fontified nil) 216 224 (fontified nil) 224 225 (face (rainbow-delimiters-depth-1-face) fontified nil) 225 226 (face (rainbow-delimiters-depth-2-face) fontified nil) 226 233 (face font-lock-string-face fontified nil) 233 235 (fontified nil) 235 268 (face font-lock-string-face fontified nil) 268 269 (face (rainbow-delimiters-depth-2-face) fontified nil) 269 270 (face (rainbow-delimiters-depth-1-face) fontified nil) 270 293 (fontified nil) 293 295 (face font-lock-comment-delimiter-face fontified nil) 295 321 (face font-lock-comment-face fontified nil) 321 329 (fontified nil) 329 341 (face font-lock-variable-name-face fontified nil) 341 342 (fontified nil) 342 343 (face font-lock-operator-face fontified nil) 343 364 (fontified nil) 364 365 (face (rainbow-delimiters-depth-1-face) fontified nil) 365 379 (fontified nil) 379 380 (face (rainbow-delimiters-depth-1-face) fontified nil) 380 389 (fontified nil) 389 391 (face font-lock-keyword-face fontified nil) 391 392 (fontified nil) 392 395 (face font-lock-keyword-face fontified nil) 395 422 (fontified nil) 422 428 (face font-lock-keyword-face fontified nil) 428 436 (fontified nil) 436 437 (face (rainbow-delimiters-depth-1-face) fontified nil) 437 438 (face (rainbow-delimiters-depth-2-face) fontified nil) 438 445 (face font-lock-string-face fontified nil) 445 447 (fontified nil) 447 480 (face font-lock-string-face fontified nil) 480 481 (face (rainbow-delimiters-depth-2-face) fontified nil) 481 482 (face (rainbow-delimiters-depth-1-face) fontified nil) 482 505 (fontified nil) 505 507 (face font-lock-comment-delimiter-face fontified nil) 507 534 (face font-lock-comment-face fontified nil) 534 542 (fontified nil) 542 545 (face font-lock-keyword-face fontified nil) 545 559 (fontified nil) 559 561 (face font-lock-comment-delimiter-face fontified nil) 561 597 (face font-lock-comment-face fontified nil) 597 609 (fontified nil) 609 624 (face font-lock-variable-name-face fontified nil) 624 625 (fontified nil) 625 626 (face font-lock-operator-face fontified nil) 626 627 (fontified nil) 627 630 (face font-lock-builtin-face fontified nil) 630 631 (face (rainbow-delimiters-depth-1-face) fontified nil) 631 643 (fontified nil) 643 644 (face (rainbow-delimiters-depth-1-face) fontified nil) 644 645 (fontified nil) 645 646 (face font-lock-operator-face fontified nil) 646 661 (fontified nil) 661 663 (face font-lock-keyword-face fontified nil) 663 697 (fontified nil) 697 709 (face font-lock-variable-name-face fontified nil) 709 710 (fontified nil) 710 712 (face font-lock-operator-face fontified nil) 712 713 (fontified nil) 713 716 (face font-lock-string-face fontified nil) 716 717 (fontified nil) 717 718 (face font-lock-operator-face fontified nil) 718 719 (fontified nil) 719 720 (face (rainbow-delimiters-depth-1-face) fontified nil) 720 722 (fontified nil) 722 723 (face font-lock-operator-face fontified nil) 723 739 (fontified nil) 739 740 (face (rainbow-delimiters-depth-1-face) fontified nil) 740 753 (fontified nil) 753 766 (face font-lock-variable-name-face fontified nil) 766 767 (fontified nil) 767 768 (face font-lock-operator-face fontified nil) 768 785 (fontified nil) 785 786 (face (rainbow-delimiters-depth-1-face) fontified nil) 786 808 (fontified nil) 808 809 (face font-lock-operator-face fontified nil) 809 813 (face font-lock-constant-face fontified nil) 813 814 (face (rainbow-delimiters-depth-1-face) fontified nil) 814 827 (fontified nil) 827 832 (face font-lock-builtin-face fontified nil) 832 833 (face (rainbow-delimiters-depth-1-face) fontified nil) 833 834 (fontified nil) 834 863 (face font-lock-string-face fontified nil) 863 864 (face nil fontified nil) 864 867 (face font-lock-builtin-face fontified nil) 867 883 (face nil fontified nil) 883 890 (face font-lock-string-face fontified nil) 890 891 (face (rainbow-delimiters-depth-1-face) fontified nil) 891 900 (fontified nil) 900 906 (face font-lock-keyword-face fontified nil) 906 907 (fontified nil) 907 916 (face font-lock-type-face fontified nil) 916 917 (fontified nil) 917 919 (face font-lock-keyword-face fontified nil) 919 935 (fontified nil) 935 940 (face font-lock-builtin-face fontified nil) 940 941 (face (rainbow-delimiters-depth-1-face) fontified nil) 941 942 (fontified nil) 942 945 (face font-lock-string-face fontified nil) 945 964 (face font-lock-string-face fontified nil) 964 965 (face nil fontified nil) 965 968 (face font-lock-builtin-face fontified nil) 968 972 (face nil fontified nil) 972 973 (face font-lock-string-face fontified nil) 973 974 (face (rainbow-delimiters-depth-1-face) fontified nil) 974 975 (fontified nil) 975 987 (fontified nil) 987 993 (face font-lock-keyword-face fontified nil) 993 1001 (fontified nil) 1001 1002 (face (rainbow-delimiters-depth-1-face) fontified nil) 1002 1003 (face (rainbow-delimiters-depth-2-face) fontified nil) 1003 1010 (face font-lock-string-face fontified nil) 1010 1012 (fontified nil) 1012 1045 (face font-lock-string-face fontified nil) 1045 1046 (face (rainbow-delimiters-depth-2-face) fontified nil) 1046 1047 (face (rainbow-delimiters-depth-1-face) fontified nil) 1047 1070 (fontified nil) 1070 1072 (face font-lock-comment-delimiter-face fontified nil) 1072 1110 (face font-lock-comment-face fontified nil) 1110 1118 (fontified nil) 1118 1123 (face font-lock-builtin-face fontified nil) 1123 1124 (face (rainbow-delimiters-depth-1-face) fontified nil) 1124 1125 (fontified nil) 1125 1150 (face font-lock-string-face fontified nil) 1150 1155 (face nil fontified nil) 1155 1166 (face font-lock-string-face fontified nil) 1166 1175 (face nil fontified nil) 1175 1176 (face font-lock-string-face fontified nil) 1176 1177 (face (rainbow-delimiters-depth-1-face) fontified nil) 1177 1186 (fontified nil) 1186 1191 (face font-lock-builtin-face fontified nil) 1191 1192 (face (rainbow-delimiters-depth-1-face) fontified nil) 1192 1193 (fontified nil) 1193 1206 (face font-lock-string-face fontified nil) 1206 1207 (face nil fontified nil) 1207 1210 (face font-lock-builtin-face fontified nil) 1210 1225 (face nil fontified nil) 1225 1237 (face font-lock-string-face fontified nil) 1237 1238 (face (rainbow-delimiters-depth-1-face) fontified nil) 1238 1256 (fontified nil) 1256 1262 (face font-lock-keyword-face fontified nil) 1262 1270 (fontified nil) 1270 1271 (face (rainbow-delimiters-depth-1-face) fontified nil) 1271 1272 (face (rainbow-delimiters-depth-2-face) fontified nil) 1272 1285 (fontified nil) 1285 1293 (face font-lock-string-face fontified nil) 1293 1294 (fontified nil face font-lock-string-face) 1294 1296 (fontified nil) 1296 1318 (fontified nil face font-lock-string-face) 1318 1320 (fontified nil) 1320 1332 (fontified nil) 1332 1341 (face font-lock-string-face fontified nil) 1341 1343 (fontified nil) 1343 1347 (face font-lock-constant-face fontified nil) 1347 1348 (fontified nil) 1348 1356 (fontified nil) 1356 1357 (face (rainbow-delimiters-depth-2-face) fontified nil) 1357 1358 (face (rainbow-delimiters-depth-1-face) fontified nil) 1358 1362 (fontified nil) 1362 1363 (fontified nil rear-nonsticky nil)) . 3920) (undo-tree-id404 . -1362) (undo-tree-id405 . -1362) (nil fontified t 5267 . 5268) (nil fontified t 5263 . 5267) (nil fontified t 5261 . 5263) (nil fontified t 5252 . 5261) (nil fontified t 5240 . 5252) (nil fontified t 5238 . 5240) (nil fontified t 5216 . 5238) (nil fontified t 5214 . 5216) (nil fontified t 5213 . 5214) (nil fontified t 5205 . 5213) (nil fontified t 5192 . 5205) (nil fontified t 5191 . 5192) (nil fontified t 5190 . 5191) (nil fontified t 5182 . 5190) (nil fontified t 5176 . 5182) (nil fontified t 5158 . 5176) (nil fontified t 5157 . 5158) (nil fontified t 5145 . 5157) (nil fontified t 5130 . 5145) (nil fontified t 5127 . 5130) (nil fontified t 5126 . 5127) (nil fontified t 5113 . 5126) (nil fontified t 5112 . 5113) (nil fontified t 5111 . 5112) (nil fontified t 5106 . 5111) (nil fontified t 5097 . 5106) (nil fontified t 5096 . 5097) (nil fontified t 5095 . 5096) (nil fontified t 5086 . 5095) (nil fontified t 5075 . 5086) (nil fontified t 5070 . 5075) (nil fontified t 5045 . 5070) (nil fontified t 5044 . 5045) (nil fontified t 5043 . 5044) (nil fontified t 5038 . 5043) (nil fontified t 5030 . 5038) (nil fontified t 4992 . 5030) (nil fontified t 4990 . 4992) (nil fontified t 4967 . 4990) (nil fontified t 4966 . 4967) (nil fontified t 4965 . 4966) (nil fontified t 4932 . 4965) (nil fontified t 4930 . 4932) (nil fontified t 4923 . 4930) (nil fontified t 4922 . 4923) (nil fontified t 4921 . 4922) (nil fontified t 4913 . 4921) (nil fontified t 4907 . 4913) (nil fontified t 4895 . 4907) (nil fontified t 4894 . 4895) (nil fontified t 4893 . 4894) (nil fontified t 4892 . 4893) (nil fontified t 4888 . 4892) (nil fontified t 4885 . 4888) (nil fontified t 4884 . 4885) (nil fontified t 4865 . 4884) (nil fontified t 4862 . 4865) (nil fontified t 4861 . 4862) (nil fontified t 4860 . 4861) (nil fontified t 4855 . 4860) (nil fontified t 4839 . 4855) (nil fontified t 4837 . 4839) (nil fontified t 4836 . 4837) (nil fontified t 4827 . 4836) (nil fontified t 4826 . 4827) (nil fontified t 4820 . 4826) (nil fontified t 4811 . 4820) (nil fontified t 4810 . 4811) (nil fontified t 4803 . 4810) (nil fontified t 4787 . 4803) (nil fontified t 4784 . 4787) (nil fontified t 4783 . 4784) (nil fontified t 4754 . 4783) (nil fontified t 4753 . 4754) (nil fontified t 4752 . 4753) (nil fontified t 4747 . 4752) (nil fontified t 4734 . 4747) (nil fontified t 4733 . 4734) (nil fontified t 4729 . 4733) (nil fontified t 4728 . 4729) (nil fontified t 4706 . 4728) (nil fontified t 4705 . 4706) (nil fontified t 4688 . 4705) (nil fontified t 4687 . 4688) (nil fontified t 4686 . 4687) (nil fontified t 4673 . 4686) (nil fontified t 4660 . 4673) (nil fontified t 4659 . 4660) (nil fontified t 4643 . 4659) (nil fontified t 4642 . 4643) (nil fontified t 4640 . 4642) (nil fontified t 4639 . 4640) (nil fontified t 4638 . 4639) (nil fontified t 4637 . 4638) (nil fontified t 4636 . 4637) (nil fontified t 4633 . 4636) (nil fontified t 4632 . 4633) (nil fontified t 4630 . 4632) (nil fontified t 4629 . 4630) (nil fontified t 4617 . 4629) (nil fontified t 4583 . 4617) (nil fontified t 4581 . 4583) (nil fontified t 4566 . 4581) (nil fontified t 4565 . 4566) (nil fontified t 4564 . 4565) (nil fontified t 4563 . 4564) (nil fontified t 4551 . 4563) (nil fontified t 4550 . 4551) (nil fontified t 4547 . 4550) (nil fontified t 4546 . 4547) (nil fontified t 4545 . 4546) (nil fontified t 4544 . 4545) (nil fontified t 4529 . 4544) (nil fontified t 4517 . 4529) (nil fontified t 4481 . 4517) (nil fontified t 4479 . 4481) (nil fontified t 4465 . 4479) (nil fontified t 4462 . 4465) (nil fontified t 4454 . 4462) (nil fontified t 4427 . 4454) (nil fontified t 4425 . 4427) (nil fontified t 4402 . 4425) (nil fontified t 4401 . 4402) (nil fontified t 4400 . 4401) (nil fontified t 4367 . 4400) (nil fontified t 4365 . 4367) (nil fontified t 4358 . 4365) (nil fontified t 4357 . 4358) (nil fontified t 4356 . 4357) (nil fontified t 4348 . 4356) (nil fontified t 4342 . 4348) (nil fontified t 4315 . 4342) (nil fontified t 4312 . 4315) (nil fontified t 4311 . 4312) (nil fontified t 4309 . 4311) (nil fontified t 4300 . 4309) (nil fontified t 4299 . 4300) (nil fontified t 4285 . 4299) (nil fontified t 4284 . 4285) (nil fontified t 4263 . 4284) (nil fontified t 4262 . 4263) (nil fontified t 4261 . 4262) (nil fontified t 4249 . 4261) (nil fontified t 4241 . 4249) (nil fontified t 4215 . 4241) (nil fontified t 4213 . 4215) (nil fontified t 4190 . 4213) (nil fontified t 4189 . 4190) (nil fontified t 4188 . 4189) (nil fontified t 4155 . 4188) (nil fontified t 4153 . 4155) (nil fontified t 4146 . 4153) (nil fontified t 4145 . 4146) (nil fontified t 4144 . 4145) (nil fontified t 4136 . 4144) (nil fontified t 4130 . 4136) (nil fontified t 4116 . 4130) (nil fontified t 4115 . 4116) (nil fontified t 4102 . 4115) (nil fontified t 4101 . 4102) (nil fontified t 4075 . 4101) (nil fontified t 4072 . 4075) (nil fontified t 4071 . 4072) (nil fontified t 4069 . 4071) (nil fontified t 4061 . 4069) (nil fontified t 4036 . 4061) (nil fontified t 4034 . 4036) (nil fontified t 4011 . 4034) (nil fontified t 4010 . 4011) (nil fontified t 4009 . 4010) (nil fontified t 3980 . 4009) (nil fontified t 3978 . 3980) (nil fontified t 3971 . 3978) (nil fontified t 3970 . 3971) (nil fontified t 3969 . 3970) (nil fontified t 3961 . 3969) (nil fontified t 3955 . 3961) (nil fontified t 3926 . 3955) (nil fontified t 3923 . 3926) (nil fontified t 3922 . 3923) (nil fontified t 3920 . 3922) (nil rear-nonsticky t 5282 . 5283)) (26806 40847 372161 248000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3365) (undo-tree-id406 . -8) 3373 (3364 . 3373) 3356) nil (26806 40865 949960 92000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 4727 . 4728) (nil fontified nil 3365 . 4728) (3365 . 4728)) nil (26806 40865 949952 900000) 0 nil])
([nil nil ((3365 . 3369) 3379) nil (26806 40865 949952 416000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3373) (3365 . 3373) 3379) nil (26806 40865 949949 596000) 0 nil])
([nil nil ((#("def extract_base64_image(data_url): # BS
    \"\"\"Extract base64 image data from data URL\"\"\"
    try:
        if ',' in data_url:
            return data_url.split(',')[1]
        return data_url
    except Exception:
        return None
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 24 (face font-lock-function-name-face fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 36 (fontified t) 36 38 (face font-lock-comment-delimiter-face fontified t) 38 40 (face font-lock-comment-face fontified t) 40 41 (face font-lock-comment-face fontified t) 41 45 (fontified t) 45 47 (face font-lock-doc-face fontified t) 47 48 (face font-lock-doc-face syntax-table (15) fontified t) 48 87 (face font-lock-doc-face fontified t) 87 88 (face font-lock-doc-face syntax-table (15) fontified t) 88 90 (face font-lock-doc-face fontified t) 90 91 (fontified t) 91 95 (fontified t) 95 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 108 (fontified t) 108 110 (face font-lock-keyword-face fontified t) 110 111 (fontified t) 111 114 (face font-lock-string-face fontified t) 114 115 (fontified t) 115 117 (face font-lock-keyword-face fontified t) 117 127 (fontified t) 127 128 (fontified t) 128 140 (fontified t) 140 146 (face font-lock-keyword-face fontified t) 146 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-1-face) fontified t) 162 165 (face font-lock-string-face fontified t) 165 166 (face (rainbow-delimiters-depth-1-face) fontified t) 166 167 (face (rainbow-delimiters-depth-1-face) fontified t) 167 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-1-face) fontified t) 169 170 (fontified t) 170 178 (fontified t) 178 184 (face font-lock-keyword-face fontified t) 184 198 (fontified t) 198 204 (face font-lock-keyword-face fontified t) 204 205 (fontified t) 205 214 (face font-lock-type-face fontified t) 214 216 (fontified t) 216 224 (fontified t) 224 230 (face font-lock-keyword-face fontified t) 230 231 (fontified t) 231 234 (face font-lock-constant-face fontified t) 234 235 (face font-lock-constant-face fontified t rear-nonsticky t) 235 236 (fontified t)) . 2384) (undo-tree-id477 . -230) (undo-tree-id478 . -235) (undo-tree-id479 . -14) (undo-tree-id480 . -230) (undo-tree-id481 . -168) (undo-tree-id482 . -184) (undo-tree-id483 . -184) (undo-tree-id484 . -184) (undo-tree-id485 . -208) (undo-tree-id486 . -208) (undo-tree-id487 . -208) (undo-tree-id488 . -208) (undo-tree-id489 . -208) (undo-tree-id490 . -208) (undo-tree-id491 . -208) (undo-tree-id492 . -208) (undo-tree-id493 . -208) (undo-tree-id494 . -208) (undo-tree-id495 . -208) (undo-tree-id496 . -208) (undo-tree-id497 . -208) (undo-tree-id498 . -208) (undo-tree-id499 . -208) (undo-tree-id500 . -208) (undo-tree-id501 . -208) (undo-tree-id502 . -208) (undo-tree-id503 . -208) (undo-tree-id504 . -208) (undo-tree-id505 . -216) (undo-tree-id506 . -230) (undo-tree-id507 . -230) (undo-tree-id508 . -230) (undo-tree-id509 . -230) (undo-tree-id510 . -230) (undo-tree-id511 . -230) (undo-tree-id512 . -230) (undo-tree-id513 . -230) (undo-tree-id514 . -230) (undo-tree-id515 . -230) (undo-tree-id516 . -230) (undo-tree-id517 . -230) (undo-tree-id518 . -230) (undo-tree-id519 . -230) (undo-tree-id520 . -230) (undo-tree-id521 . -230) (undo-tree-id522 . -230) (undo-tree-id523 . -230) (undo-tree-id524 . -230) (undo-tree-id525 . -230) (undo-tree-id526 . -230) (undo-tree-id527 . -230) (undo-tree-id528 . -236) 2614 (t 26806 40865 950749 48000)) nil (26806 40881 119123 575000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2614 . 2615) (nil fontified nil 2384 . 2615) (2384 . 2615) (2383 . 2384) 2383) nil (26806 40881 119111 456000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 2615) (undo-tree-id425 . 1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1)) nil (26806 40881 119108 409000) 0 nil])
([nil nil ((141 . 147) (#("base" 0 4 (fontified t)) . -141) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) 145 (#("6" 0 1 (fontified t)) . -145) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) 146 (134 . 146) (#("i" 0 1 (fontified nil)) . -134) (undo-tree-id605 . -1) (133 . 135) (t 26806 40881 121084 217000) 103) nil (26806 40934 915997 714000) 0 nil])
([nil nil ((nil rear-nonsticky nil 425 . 426) (nil fontified nil 225 . 426) (225 . 426) (t 26806 40934 918270 260000)) nil (26808 3270 386825 475000) 0 nil])
([nil nil ((224 . 225) 203) nil (26808 3270 386824 736000) 0 nil])
([nil nil ((233 . 235) (#("T" 0 1 (face font-lock-function-name-face fontified t)) . -233) (undo-tree-id0 . -1) 234) nil (26808 3270 386823 358000) 0 nil])
([nil current ((233 . 239)) nil (26808 3270 386805 839000) 0 nil])
nil
