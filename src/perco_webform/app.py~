import os
import re
import mysql.connector
from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv

# Load environment variables from .env
load_dotenv()

app = Flask(__name__)

# --- DB connection helper ---
def get_db_connection():
    return mysql.connector.connect(
        host=os.getenv("DB_HOST"),
        port=int(os.getenv("DB_PORT", 3306)),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME"),
    )


# --- Routes ---
@app.route("/")
def index():
    return render_template("index.html")


@app.route('/favicon.ico')
def favicon():
    return send_from_directory(
        os.path.join(app.root_path, 'static'),
        'favicon.ico',
        mimetype='image/vnd.microsoft.icon'
    )

@app.route("/api/get_user_by_iin", methods=["POST"])
def get_user_by_iin():
    try:
        data = request.get_json()
        iin = data.get("iin")

        print(f"Received IIN: {iin}")

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # First query: find user_id
        cursor.execute(
            "SELECT user_id FROM user_staff WHERE tabel_number = %s", (iin,)
        )
        row = cursor.fetchone()
        print(f"user_staff query result: {row}")

        if not row:
            print(f"No user_id found for IIN {iin}")
            return jsonify({"success": False, "error": "User not found"}), 404

        user_id = row["user_id"]

        # Second query: fetch user info
        cursor.execute(
            "SELECT first_name, last_name, middle_name FROM user WHERE id = %s",
            (user_id,)
        )
        user = cursor.fetchone()
        print(f"users query result: {user}")

        cursor.close()
        conn.close()

        if not user:
            print(f"No user record found for user_id {user_id}")
            return jsonify({"success": False, "error": "User not found"}), 404

        return jsonify({
            "success": True,
            "user_id": user_id,
            **user
        })

    except Exception as e:
        print("Error in /api/get_user_by_iin:", e)
        return jsonify({"success": False, "error": str(e)}), 500


def main():
    app.run(host="0.0.0.0", port=8080, debug=True)


if __name__ == "__main__":
    main()

